/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sift@17.1.3";
exports.ids = ["vendor-chunks/sift@17.1.3"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/sift@17.1.3/node_modules/sift/index.js":
/*!********************************************************************!*\
  !*** ../node_modules/.pnpm/sift@17.1.3/node_modules/sift/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lib = __webpack_require__(/*! ./lib */ \"(rsc)/../node_modules/.pnpm/sift@17.1.3/node_modules/sift/lib/index.js\");\n\nmodule.exports = lib.default;\nObject.assign(module.exports, lib);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NpZnRAMTcuMS4zL25vZGVfbW9kdWxlcy9zaWZ0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksbUJBQU8sQ0FBQyxxRkFBTzs7QUFFM0I7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcGF1bC9wcm9qZWN0cy9wYXlsb2FkL3BsdWdpbi1kZXZlbG9wbWVudC9iZXR0ZXItZmllbGRzL2dpdHJvb3Qvbm9kZV9tb2R1bGVzLy5wbnBtL3NpZnRAMTcuMS4zL25vZGVfbW9kdWxlcy9zaWZ0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxpYiA9IHJlcXVpcmUoXCIuL2xpYlwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaWIuZGVmYXVsdDtcbk9iamVjdC5hc3NpZ24obW9kdWxlLmV4cG9ydHMsIGxpYik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/sift@17.1.3/node_modules/sift/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/sift@17.1.3/node_modules/sift/lib/index.js":
/*!************************************************************************!*\
  !*** ../node_modules/.pnpm/sift@17.1.3/node_modules/sift/lib/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\n     true ? factory(exports) :\n    0;\n})(this, (function (exports) { 'use strict';\n\n    /******************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n        var e = new Error(message);\r\n        return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n    };\n\n    var typeChecker = function (type) {\n        var typeString = \"[object \" + type + \"]\";\n        return function (value) {\n            return getClassName(value) === typeString;\n        };\n    };\n    var getClassName = function (value) { return Object.prototype.toString.call(value); };\n    var comparable = function (value) {\n        if (value instanceof Date) {\n            return value.getTime();\n        }\n        else if (isArray(value)) {\n            return value.map(comparable);\n        }\n        else if (value && typeof value.toJSON === \"function\") {\n            return value.toJSON();\n        }\n        return value;\n    };\n    var coercePotentiallyNull = function (value) {\n        return value == null ? null : value;\n    };\n    var isArray = typeChecker(\"Array\");\n    var isObject = typeChecker(\"Object\");\n    var isFunction = typeChecker(\"Function\");\n    var isProperty = function (item, key) {\n        return item.hasOwnProperty(key) && !isFunction(item[key]);\n    };\n    var isVanillaObject = function (value) {\n        return (value &&\n            (value.constructor === Object ||\n                value.constructor === Array ||\n                value.constructor.toString() === \"function Object() { [native code] }\" ||\n                value.constructor.toString() === \"function Array() { [native code] }\") &&\n            !value.toJSON);\n    };\n    var equals = function (a, b) {\n        if (a == null && a == b) {\n            return true;\n        }\n        if (a === b) {\n            return true;\n        }\n        if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n            return false;\n        }\n        if (isArray(a)) {\n            if (a.length !== b.length) {\n                return false;\n            }\n            for (var i = 0, length_1 = a.length; i < length_1; i++) {\n                if (!equals(a[i], b[i]))\n                    return false;\n            }\n            return true;\n        }\n        else if (isObject(a)) {\n            if (Object.keys(a).length !== Object.keys(b).length) {\n                return false;\n            }\n            for (var key in a) {\n                if (!equals(a[key], b[key]))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * Walks through each value given the context - used for nested operations. E.g:\n     * { \"person.address\": { $eq: \"blarg\" }}\n     */\n    var walkKeyPathValues = function (item, keyPath, next, depth, key, owner) {\n        var currentKey = keyPath[depth];\n        // if array, then try matching. Might fall through for cases like:\n        // { $eq: [1, 2, 3] }, [ 1, 2, 3 ].\n        if (isArray(item) &&\n            isNaN(Number(currentKey)) &&\n            !isProperty(item, currentKey)) {\n            for (var i = 0, length_1 = item.length; i < length_1; i++) {\n                // if FALSE is returned, then terminate walker. For operations, this simply\n                // means that the search critera was met.\n                if (!walkKeyPathValues(item[i], keyPath, next, depth, i, item)) {\n                    return false;\n                }\n            }\n        }\n        if (depth === keyPath.length || item == null) {\n            return next(item, key, owner, depth === 0, depth === keyPath.length);\n        }\n        return walkKeyPathValues(item[currentKey], keyPath, next, depth + 1, currentKey, item);\n    };\n    var BaseOperation = /** @class */ (function () {\n        function BaseOperation(params, owneryQuery, options, name) {\n            this.params = params;\n            this.owneryQuery = owneryQuery;\n            this.options = options;\n            this.name = name;\n            this.init();\n        }\n        BaseOperation.prototype.init = function () { };\n        BaseOperation.prototype.reset = function () {\n            this.done = false;\n            this.keep = false;\n        };\n        return BaseOperation;\n    }());\n    var GroupOperation = /** @class */ (function (_super) {\n        __extends(GroupOperation, _super);\n        function GroupOperation(params, owneryQuery, options, children) {\n            var _this = _super.call(this, params, owneryQuery, options) || this;\n            _this.children = children;\n            return _this;\n        }\n        /**\n         */\n        GroupOperation.prototype.reset = function () {\n            this.keep = false;\n            this.done = false;\n            for (var i = 0, length_2 = this.children.length; i < length_2; i++) {\n                this.children[i].reset();\n            }\n        };\n        /**\n         */\n        GroupOperation.prototype.childrenNext = function (item, key, owner, root, leaf) {\n            var done = true;\n            var keep = true;\n            for (var i = 0, length_3 = this.children.length; i < length_3; i++) {\n                var childOperation = this.children[i];\n                if (!childOperation.done) {\n                    childOperation.next(item, key, owner, root, leaf);\n                }\n                if (!childOperation.keep) {\n                    keep = false;\n                }\n                if (childOperation.done) {\n                    if (!childOperation.keep) {\n                        break;\n                    }\n                }\n                else {\n                    done = false;\n                }\n            }\n            this.done = done;\n            this.keep = keep;\n        };\n        return GroupOperation;\n    }(BaseOperation));\n    var NamedGroupOperation = /** @class */ (function (_super) {\n        __extends(NamedGroupOperation, _super);\n        function NamedGroupOperation(params, owneryQuery, options, children, name) {\n            var _this = _super.call(this, params, owneryQuery, options, children) || this;\n            _this.name = name;\n            return _this;\n        }\n        return NamedGroupOperation;\n    }(GroupOperation));\n    var QueryOperation = /** @class */ (function (_super) {\n        __extends(QueryOperation, _super);\n        function QueryOperation() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        /**\n         */\n        QueryOperation.prototype.next = function (item, key, parent, root) {\n            this.childrenNext(item, key, parent, root);\n        };\n        return QueryOperation;\n    }(GroupOperation));\n    var NestedOperation = /** @class */ (function (_super) {\n        __extends(NestedOperation, _super);\n        function NestedOperation(keyPath, params, owneryQuery, options, children) {\n            var _this = _super.call(this, params, owneryQuery, options, children) || this;\n            _this.keyPath = keyPath;\n            _this.propop = true;\n            /**\n             */\n            _this._nextNestedValue = function (value, key, owner, root, leaf) {\n                _this.childrenNext(value, key, owner, root, leaf);\n                return !_this.done;\n            };\n            return _this;\n        }\n        /**\n         */\n        NestedOperation.prototype.next = function (item, key, parent) {\n            walkKeyPathValues(item, this.keyPath, this._nextNestedValue, 0, key, parent);\n        };\n        return NestedOperation;\n    }(GroupOperation));\n    var createTester = function (a, compare) {\n        if (a instanceof Function) {\n            return a;\n        }\n        if (a instanceof RegExp) {\n            return function (b) {\n                var result = typeof b === \"string\" && a.test(b);\n                a.lastIndex = 0;\n                return result;\n            };\n        }\n        var comparableA = comparable(a);\n        return function (b) { return compare(comparableA, comparable(b)); };\n    };\n    var EqualsOperation = /** @class */ (function (_super) {\n        __extends(EqualsOperation, _super);\n        function EqualsOperation() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        EqualsOperation.prototype.init = function () {\n            this._test = createTester(this.params, this.options.compare);\n        };\n        EqualsOperation.prototype.next = function (item, key, parent) {\n            if (!Array.isArray(parent) || parent.hasOwnProperty(key)) {\n                if (this._test(item, key, parent)) {\n                    this.done = true;\n                    this.keep = true;\n                }\n            }\n        };\n        return EqualsOperation;\n    }(BaseOperation));\n    var createEqualsOperation = function (params, owneryQuery, options) { return new EqualsOperation(params, owneryQuery, options); };\n    var numericalOperationCreator = function (createNumericalOperation) {\n        return function (params, owneryQuery, options, name) {\n            return createNumericalOperation(params, owneryQuery, options, name);\n        };\n    };\n    var numericalOperation = function (createTester) {\n        return numericalOperationCreator(function (params, owneryQuery, options, name) {\n            var typeofParams = typeof comparable(params);\n            var test = createTester(params);\n            return new EqualsOperation(function (b) {\n                var actualValue = coercePotentiallyNull(b);\n                return (typeof comparable(actualValue) === typeofParams && test(actualValue));\n            }, owneryQuery, options, name);\n        });\n    };\n    var createNamedOperation = function (name, params, parentQuery, options) {\n        var operationCreator = options.operations[name];\n        if (!operationCreator) {\n            throwUnsupportedOperation(name);\n        }\n        return operationCreator(params, parentQuery, options, name);\n    };\n    var throwUnsupportedOperation = function (name) {\n        throw new Error(\"Unsupported operation: \".concat(name));\n    };\n    var containsOperation = function (query, options) {\n        for (var key in query) {\n            if (options.operations.hasOwnProperty(key) || key.charAt(0) === \"$\")\n                return true;\n        }\n        return false;\n    };\n    var createNestedOperation = function (keyPath, nestedQuery, parentKey, owneryQuery, options) {\n        if (containsOperation(nestedQuery, options)) {\n            var _a = createQueryOperations(nestedQuery, parentKey, options), selfOperations = _a[0], nestedOperations = _a[1];\n            if (nestedOperations.length) {\n                throw new Error(\"Property queries must contain only operations, or exact objects.\");\n            }\n            return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, selfOperations);\n        }\n        return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, [\n            new EqualsOperation(nestedQuery, owneryQuery, options),\n        ]);\n    };\n    var createQueryOperation = function (query, owneryQuery, _a) {\n        if (owneryQuery === void 0) { owneryQuery = null; }\n        var _b = _a === void 0 ? {} : _a, compare = _b.compare, operations = _b.operations;\n        var options = {\n            compare: compare || equals,\n            operations: Object.assign({}, operations || {}),\n        };\n        var _c = createQueryOperations(query, null, options), selfOperations = _c[0], nestedOperations = _c[1];\n        var ops = [];\n        if (selfOperations.length) {\n            ops.push(new NestedOperation([], query, owneryQuery, options, selfOperations));\n        }\n        ops.push.apply(ops, nestedOperations);\n        if (ops.length === 1) {\n            return ops[0];\n        }\n        return new QueryOperation(query, owneryQuery, options, ops);\n    };\n    var createQueryOperations = function (query, parentKey, options) {\n        var selfOperations = [];\n        var nestedOperations = [];\n        if (!isVanillaObject(query)) {\n            selfOperations.push(new EqualsOperation(query, query, options));\n            return [selfOperations, nestedOperations];\n        }\n        for (var key in query) {\n            if (options.operations.hasOwnProperty(key)) {\n                var op = createNamedOperation(key, query[key], query, options);\n                if (op) {\n                    if (!op.propop && parentKey && !options.operations[parentKey]) {\n                        throw new Error(\"Malformed query. \".concat(key, \" cannot be matched against property.\"));\n                    }\n                }\n                // probably just a flag for another operation (like $options)\n                if (op != null) {\n                    selfOperations.push(op);\n                }\n            }\n            else if (key.charAt(0) === \"$\") {\n                throwUnsupportedOperation(key);\n            }\n            else {\n                nestedOperations.push(createNestedOperation(key.split(\".\"), query[key], key, query, options));\n            }\n        }\n        return [selfOperations, nestedOperations];\n    };\n    var createOperationTester = function (operation) {\n        return function (item, key, owner) {\n            operation.reset();\n            operation.next(item, key, owner);\n            return operation.keep;\n        };\n    };\n    var createQueryTester = function (query, options) {\n        if (options === void 0) { options = {}; }\n        return createOperationTester(createQueryOperation(query, null, options));\n    };\n\n    var $Ne = /** @class */ (function (_super) {\n        __extends($Ne, _super);\n        function $Ne() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        $Ne.prototype.init = function () {\n            this._test = createTester(this.params, this.options.compare);\n        };\n        $Ne.prototype.reset = function () {\n            _super.prototype.reset.call(this);\n            this.keep = true;\n        };\n        $Ne.prototype.next = function (item) {\n            if (this._test(item)) {\n                this.done = true;\n                this.keep = false;\n            }\n        };\n        return $Ne;\n    }(BaseOperation));\n    // https://docs.mongodb.com/manual/reference/operator/query/elemMatch/\n    var $ElemMatch = /** @class */ (function (_super) {\n        __extends($ElemMatch, _super);\n        function $ElemMatch() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        $ElemMatch.prototype.init = function () {\n            if (!this.params || typeof this.params !== \"object\") {\n                throw new Error(\"Malformed query. $elemMatch must by an object.\");\n            }\n            this._queryOperation = createQueryOperation(this.params, this.owneryQuery, this.options);\n        };\n        $ElemMatch.prototype.reset = function () {\n            _super.prototype.reset.call(this);\n            this._queryOperation.reset();\n        };\n        $ElemMatch.prototype.next = function (item) {\n            if (isArray(item)) {\n                for (var i = 0, length_1 = item.length; i < length_1; i++) {\n                    // reset query operation since item being tested needs to pass _all_ query\n                    // operations for it to be a success\n                    this._queryOperation.reset();\n                    var child = item[i];\n                    this._queryOperation.next(child, i, item, false);\n                    this.keep = this.keep || this._queryOperation.keep;\n                }\n                this.done = true;\n            }\n            else {\n                this.done = false;\n                this.keep = false;\n            }\n        };\n        return $ElemMatch;\n    }(BaseOperation));\n    var $Not = /** @class */ (function (_super) {\n        __extends($Not, _super);\n        function $Not() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        $Not.prototype.init = function () {\n            this._queryOperation = createQueryOperation(this.params, this.owneryQuery, this.options);\n        };\n        $Not.prototype.reset = function () {\n            _super.prototype.reset.call(this);\n            this._queryOperation.reset();\n        };\n        $Not.prototype.next = function (item, key, owner, root) {\n            this._queryOperation.next(item, key, owner, root);\n            this.done = this._queryOperation.done;\n            this.keep = !this._queryOperation.keep;\n        };\n        return $Not;\n    }(BaseOperation));\n    var $Size = /** @class */ (function (_super) {\n        __extends($Size, _super);\n        function $Size() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        $Size.prototype.init = function () { };\n        $Size.prototype.next = function (item) {\n            if (isArray(item) && item.length === this.params) {\n                this.done = true;\n                this.keep = true;\n            }\n            // if (parent && parent.length === this.params) {\n            //   this.done = true;\n            //   this.keep = true;\n            // }\n        };\n        return $Size;\n    }(BaseOperation));\n    var assertGroupNotEmpty = function (values) {\n        if (values.length === 0) {\n            throw new Error(\"$and/$or/$nor must be a nonempty array\");\n        }\n    };\n    var $Or = /** @class */ (function (_super) {\n        __extends($Or, _super);\n        function $Or() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = false;\n            return _this;\n        }\n        $Or.prototype.init = function () {\n            var _this = this;\n            assertGroupNotEmpty(this.params);\n            this._ops = this.params.map(function (op) {\n                return createQueryOperation(op, null, _this.options);\n            });\n        };\n        $Or.prototype.reset = function () {\n            this.done = false;\n            this.keep = false;\n            for (var i = 0, length_2 = this._ops.length; i < length_2; i++) {\n                this._ops[i].reset();\n            }\n        };\n        $Or.prototype.next = function (item, key, owner) {\n            var done = false;\n            var success = false;\n            for (var i = 0, length_3 = this._ops.length; i < length_3; i++) {\n                var op = this._ops[i];\n                op.next(item, key, owner);\n                if (op.keep) {\n                    done = true;\n                    success = op.keep;\n                    break;\n                }\n            }\n            this.keep = success;\n            this.done = done;\n        };\n        return $Or;\n    }(BaseOperation));\n    var $Nor = /** @class */ (function (_super) {\n        __extends($Nor, _super);\n        function $Nor() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = false;\n            return _this;\n        }\n        $Nor.prototype.next = function (item, key, owner) {\n            _super.prototype.next.call(this, item, key, owner);\n            this.keep = !this.keep;\n        };\n        return $Nor;\n    }($Or));\n    var $In = /** @class */ (function (_super) {\n        __extends($In, _super);\n        function $In() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        $In.prototype.init = function () {\n            var _this = this;\n            var params = Array.isArray(this.params) ? this.params : [this.params];\n            this._testers = params.map(function (value) {\n                if (containsOperation(value, _this.options)) {\n                    throw new Error(\"cannot nest $ under \".concat(_this.name.toLowerCase()));\n                }\n                return createTester(value, _this.options.compare);\n            });\n        };\n        $In.prototype.next = function (item, key, owner) {\n            var done = false;\n            var success = false;\n            for (var i = 0, length_4 = this._testers.length; i < length_4; i++) {\n                var test = this._testers[i];\n                if (test(item)) {\n                    done = true;\n                    success = true;\n                    break;\n                }\n            }\n            this.keep = success;\n            this.done = done;\n        };\n        return $In;\n    }(BaseOperation));\n    var $Nin = /** @class */ (function (_super) {\n        __extends($Nin, _super);\n        function $Nin(params, ownerQuery, options, name) {\n            var _this = _super.call(this, params, ownerQuery, options, name) || this;\n            _this.propop = true;\n            _this._in = new $In(params, ownerQuery, options, name);\n            return _this;\n        }\n        $Nin.prototype.next = function (item, key, owner, root) {\n            this._in.next(item, key, owner);\n            if (isArray(owner) && !root) {\n                if (this._in.keep) {\n                    this.keep = false;\n                    this.done = true;\n                }\n                else if (key == owner.length - 1) {\n                    this.keep = true;\n                    this.done = true;\n                }\n            }\n            else {\n                this.keep = !this._in.keep;\n                this.done = true;\n            }\n        };\n        $Nin.prototype.reset = function () {\n            _super.prototype.reset.call(this);\n            this._in.reset();\n        };\n        return $Nin;\n    }(BaseOperation));\n    var $Exists = /** @class */ (function (_super) {\n        __extends($Exists, _super);\n        function $Exists() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.propop = true;\n            return _this;\n        }\n        $Exists.prototype.next = function (item, key, owner, root, leaf) {\n            if (!leaf) {\n                this.done = true;\n                this.keep = !this.params;\n            }\n            else if (owner.hasOwnProperty(key) === this.params) {\n                this.done = true;\n                this.keep = true;\n            }\n        };\n        return $Exists;\n    }(BaseOperation));\n    var $And = /** @class */ (function (_super) {\n        __extends($And, _super);\n        function $And(params, owneryQuery, options, name) {\n            var _this = _super.call(this, params, owneryQuery, options, params.map(function (query) { return createQueryOperation(query, owneryQuery, options); }), name) || this;\n            _this.propop = false;\n            assertGroupNotEmpty(params);\n            return _this;\n        }\n        $And.prototype.next = function (item, key, owner, root) {\n            this.childrenNext(item, key, owner, root);\n        };\n        return $And;\n    }(NamedGroupOperation));\n    var $All = /** @class */ (function (_super) {\n        __extends($All, _super);\n        function $All(params, owneryQuery, options, name) {\n            var _this = _super.call(this, params, owneryQuery, options, params.map(function (query) { return createQueryOperation(query, owneryQuery, options); }), name) || this;\n            _this.propop = true;\n            return _this;\n        }\n        $All.prototype.next = function (item, key, owner, root) {\n            this.childrenNext(item, key, owner, root);\n        };\n        return $All;\n    }(NamedGroupOperation));\n    var $eq = function (params, owneryQuery, options) {\n        return new EqualsOperation(params, owneryQuery, options);\n    };\n    var $ne = function (params, owneryQuery, options, name) { return new $Ne(params, owneryQuery, options, name); };\n    var $or = function (params, owneryQuery, options, name) { return new $Or(params, owneryQuery, options, name); };\n    var $nor = function (params, owneryQuery, options, name) { return new $Nor(params, owneryQuery, options, name); };\n    var $elemMatch = function (params, owneryQuery, options, name) { return new $ElemMatch(params, owneryQuery, options, name); };\n    var $nin = function (params, owneryQuery, options, name) { return new $Nin(params, owneryQuery, options, name); };\n    var $in = function (params, owneryQuery, options, name) {\n        return new $In(params, owneryQuery, options, name);\n    };\n    var $lt = numericalOperation(function (params) { return function (b) {\n        return b != null && b < params;\n    }; });\n    var $lte = numericalOperation(function (params) { return function (b) {\n        return b === params || b <= params;\n    }; });\n    var $gt = numericalOperation(function (params) { return function (b) {\n        return b != null && b > params;\n    }; });\n    var $gte = numericalOperation(function (params) { return function (b) {\n        return b === params || b >= params;\n    }; });\n    var $mod = function (_a, owneryQuery, options) {\n        var mod = _a[0], equalsValue = _a[1];\n        return new EqualsOperation(function (b) { return comparable(b) % mod === equalsValue; }, owneryQuery, options);\n    };\n    var $exists = function (params, owneryQuery, options, name) { return new $Exists(params, owneryQuery, options, name); };\n    var $regex = function (pattern, owneryQuery, options) {\n        return new EqualsOperation(new RegExp(pattern, owneryQuery.$options), owneryQuery, options);\n    };\n    var $not = function (params, owneryQuery, options, name) { return new $Not(params, owneryQuery, options, name); };\n    var typeAliases = {\n        number: function (v) { return typeof v === \"number\"; },\n        string: function (v) { return typeof v === \"string\"; },\n        bool: function (v) { return typeof v === \"boolean\"; },\n        array: function (v) { return Array.isArray(v); },\n        null: function (v) { return v === null; },\n        timestamp: function (v) { return v instanceof Date; },\n    };\n    var $type = function (clazz, owneryQuery, options) {\n        return new EqualsOperation(function (b) {\n            if (typeof clazz === \"string\") {\n                if (!typeAliases[clazz]) {\n                    throw new Error(\"Type alias does not exist\");\n                }\n                return typeAliases[clazz](b);\n            }\n            return b != null ? b instanceof clazz || b.constructor === clazz : false;\n        }, owneryQuery, options);\n    };\n    var $and = function (params, ownerQuery, options, name) { return new $And(params, ownerQuery, options, name); };\n    var $all = function (params, ownerQuery, options, name) { return new $All(params, ownerQuery, options, name); };\n    var $size = function (params, ownerQuery, options) { return new $Size(params, ownerQuery, options, \"$size\"); };\n    var $options = function () { return null; };\n    var $where = function (params, ownerQuery, options) {\n        var test;\n        if (isFunction(params)) {\n            test = params;\n        }\n        else if (!process.env.CSP_ENABLED) {\n            test = new Function(\"obj\", \"return \" + params);\n        }\n        else {\n            throw new Error(\"In CSP mode, sift does not support strings in \\\"$where\\\" condition\");\n        }\n        return new EqualsOperation(function (b) { return test.bind(b)(b); }, ownerQuery, options);\n    };\n\n    var defaultOperations = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        $Size: $Size,\n        $all: $all,\n        $and: $and,\n        $elemMatch: $elemMatch,\n        $eq: $eq,\n        $exists: $exists,\n        $gt: $gt,\n        $gte: $gte,\n        $in: $in,\n        $lt: $lt,\n        $lte: $lte,\n        $mod: $mod,\n        $ne: $ne,\n        $nin: $nin,\n        $nor: $nor,\n        $not: $not,\n        $options: $options,\n        $or: $or,\n        $regex: $regex,\n        $size: $size,\n        $type: $type,\n        $where: $where\n    });\n\n    var createDefaultQueryOperation = function (query, ownerQuery, _a) {\n        var _b = _a === void 0 ? {} : _a, compare = _b.compare, operations = _b.operations;\n        return createQueryOperation(query, ownerQuery, {\n            compare: compare,\n            operations: Object.assign({}, defaultOperations, operations || {}),\n        });\n    };\n    var createDefaultQueryTester = function (query, options) {\n        if (options === void 0) { options = {}; }\n        var op = createDefaultQueryOperation(query, null, options);\n        return createOperationTester(op);\n    };\n\n    exports.$Size = $Size;\n    exports.$all = $all;\n    exports.$and = $and;\n    exports.$elemMatch = $elemMatch;\n    exports.$eq = $eq;\n    exports.$exists = $exists;\n    exports.$gt = $gt;\n    exports.$gte = $gte;\n    exports.$in = $in;\n    exports.$lt = $lt;\n    exports.$lte = $lte;\n    exports.$mod = $mod;\n    exports.$ne = $ne;\n    exports.$nin = $nin;\n    exports.$nor = $nor;\n    exports.$not = $not;\n    exports.$options = $options;\n    exports.$or = $or;\n    exports.$regex = $regex;\n    exports.$size = $size;\n    exports.$type = $type;\n    exports.$where = $where;\n    exports.EqualsOperation = EqualsOperation;\n    exports.createDefaultQueryOperation = createDefaultQueryOperation;\n    exports.createEqualsOperation = createEqualsOperation;\n    exports.createOperationTester = createOperationTester;\n    exports.createQueryOperation = createQueryOperation;\n    exports.createQueryTester = createQueryTester;\n    exports.default = createDefaultQueryTester;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/sift@17.1.3/node_modules/sift/lib/index.js\n");

/***/ })

};
;