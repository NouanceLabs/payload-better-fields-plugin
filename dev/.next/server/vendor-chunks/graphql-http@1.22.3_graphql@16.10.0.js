"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-http@1.22.3_graphql@16.10.0";
exports.ids = ["vendor-chunks/graphql-http@1.22.3_graphql@16.10.0"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHandler: () => (/* binding */ createHandler),\n/* harmony export */   parseRequestParams: () => (/* binding */ parseRequestParams)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"graphql\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs\");\n/**\n *\n * handler\n *\n */\n\n\n/** Checks whether the passed value is the `graphql-http` server agnostic response. */\nfunction isResponse(val) {\n    // Make sure the contents of body match string | null\n    if (!Array.isArray(val))\n        return false;\n    if (typeof val[0] !== 'string' && val[0] !== null)\n        return false;\n    if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(val[1]))\n        return false;\n    // Make sure the contents of init match ResponseInit\n    const init = val[1];\n    if (init.status && typeof init.status !== 'number')\n        return false;\n    if (init.statusText && typeof init.statusText !== 'string')\n        return false;\n    if (init.headers && !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(init.headers))\n        return false;\n    return true;\n}\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n * It parses and validates the request itself, including the request method and the\n * content-type of the body.\n *\n * If the HTTP request itself is invalid or malformed, the function will return an\n * appropriate {@link Response}.\n *\n * If the HTTP request is valid, but is not a well-formatted GraphQL request, the\n * function will throw an error and it is up to the user to handle and respond as\n * they see fit.\n *\n * @category Server\n */\nasync function parseRequestParams(req) {\n    var _a, _b;\n    const method = req.method;\n    if (method !== 'GET' && method !== 'POST') {\n        return [\n            null,\n            {\n                status: 405,\n                statusText: 'Method Not Allowed',\n                headers: {\n                    allow: 'GET, POST',\n                },\n            },\n        ];\n    }\n    const [mediaType, charset = 'charset=utf-8', // utf-8 is assumed when not specified. this parameter is either \"charset\" or \"boundary\" (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length)\n    ] = (getHeader(req, 'content-type') || '')\n        .replace(/\\s/g, '')\n        .toLowerCase()\n        .split(';');\n    const partParams = {};\n    switch (true) {\n        case method === 'GET': {\n            // TODO: what if content-type is specified and is not application/x-www-form-urlencoded?\n            try {\n                const [, search] = req.url.split('?');\n                const searchParams = new URLSearchParams(search);\n                partParams.operationName =\n                    (_a = searchParams.get('operationName')) !== null && _a !== void 0 ? _a : undefined;\n                partParams.query = (_b = searchParams.get('query')) !== null && _b !== void 0 ? _b : undefined;\n                const variables = searchParams.get('variables');\n                if (variables)\n                    partParams.variables = JSON.parse(variables);\n                const extensions = searchParams.get('extensions');\n                if (extensions)\n                    partParams.extensions = JSON.parse(extensions);\n            }\n            catch (_c) {\n                throw new Error('Unparsable URL');\n            }\n            break;\n        }\n        case method === 'POST' &&\n            mediaType === 'application/json' &&\n            charset === 'charset=utf-8':\n            {\n                if (!req.body) {\n                    throw new Error('Missing body');\n                }\n                let data;\n                try {\n                    const body = typeof req.body === 'function' ? await req.body() : req.body;\n                    data = typeof body === 'string' ? JSON.parse(body) : body;\n                }\n                catch (err) {\n                    throw new Error('Unparsable JSON body');\n                }\n                if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(data)) {\n                    throw new Error('JSON body must be an object');\n                }\n                partParams.operationName = data.operationName;\n                partParams.query = data.query;\n                partParams.variables = data.variables;\n                partParams.extensions = data.extensions;\n                break;\n            }\n        default: // graphql-http doesnt support any other content type\n            return [\n                null,\n                {\n                    status: 415,\n                    statusText: 'Unsupported Media Type',\n                },\n            ];\n    }\n    if (partParams.query == null)\n        throw new Error('Missing query');\n    if (typeof partParams.query !== 'string')\n        throw new Error('Invalid query');\n    if (partParams.variables != null &&\n        (typeof partParams.variables !== 'object' ||\n            Array.isArray(partParams.variables))) {\n        throw new Error('Invalid variables');\n    }\n    if (partParams.operationName != null &&\n        typeof partParams.operationName !== 'string') {\n        throw new Error('Invalid operationName');\n    }\n    if (partParams.extensions != null &&\n        (typeof partParams.extensions !== 'object' ||\n            Array.isArray(partParams.extensions))) {\n        throw new Error('Invalid extensions');\n    }\n    // request parameters are checked and now complete\n    return partParams;\n}\n/**\n * Makes a GraphQL over HTTP spec compliant server handler. The handler can\n * be used with your favorite server library.\n *\n * Beware that the handler resolves only after the whole operation completes.\n *\n * Errors thrown from **any** of the provided options or callbacks (or even due to\n * library misuse or potential bugs) will reject the handler's promise. They are\n * considered internal errors and you should take care of them accordingly.\n *\n * For production environments, its recommended not to transmit the exact internal\n * error details to the client, but instead report to an error logging tool or simply\n * the console.\n *\n * Simple example usage with Node:\n *\n * ```js\n * import http from 'http';\n * import { createHandler } from 'graphql-http';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * // Create the GraphQL over HTTP handler\n * const handler = createHandler({ schema });\n *\n * // Create a HTTP server using the handler on `/graphql`\n * const server = http.createServer(async (req, res) => {\n *   if (!req.url.startsWith('/graphql')) {\n *     return res.writeHead(404).end();\n *   }\n *\n *   try {\n *     const [body, init] = await handler({\n *       url: req.url,\n *       method: req.method,\n *       headers: req.headers,\n *       body: () => new Promise((resolve) => {\n *         let body = '';\n *         req.on('data', (chunk) => (body += chunk));\n *         req.on('end', () => resolve(body));\n *       }),\n *       raw: req,\n *     });\n *     res.writeHead(init.status, init.statusText, init.headers).end(body);\n *   } catch (err) {\n *     // BEWARE not to transmit the exact internal error message in production environments\n *     res.writeHead(500).end(err.message);\n *   }\n * });\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server\n */\nfunction createHandler(options) {\n    const { schema, context, validate = graphql__WEBPACK_IMPORTED_MODULE_0__.validate, validationRules = [], execute = graphql__WEBPACK_IMPORTED_MODULE_0__.execute, parse = graphql__WEBPACK_IMPORTED_MODULE_0__.parse, getOperationAST = graphql__WEBPACK_IMPORTED_MODULE_0__.getOperationAST, rootValue, onSubscribe, onOperation, formatError = (err) => err, parseRequestParams: optionsParseRequestParams = parseRequestParams, } = options;\n    return async function handler(req) {\n        let acceptedMediaType = null;\n        const accepts = (getHeader(req, 'accept') || '*/*')\n            .replace(/\\s/g, '')\n            .toLowerCase()\n            .split(',');\n        for (const accept of accepts) {\n            // accept-charset became obsolete, shouldnt be used (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset)\n            // TODO: handle the weight parameter \"q\"\n            const [mediaType, ...params] = accept.split(';');\n            const charset = (params === null || params === void 0 ? void 0 : params.find((param) => param.includes('charset='))) || 'charset=utf-8'; // utf-8 is assumed when not specified;\n            if (mediaType === 'application/graphql-response+json' &&\n                charset === 'charset=utf-8') {\n                acceptedMediaType = 'application/graphql-response+json';\n                break;\n            }\n            // application/json should be the default until watershed\n            if ((mediaType === 'application/json' ||\n                mediaType === 'application/*' ||\n                mediaType === '*/*') &&\n                (charset === 'charset=utf-8' || charset === 'charset=utf8')) {\n                acceptedMediaType = 'application/json';\n                break;\n            }\n        }\n        if (!acceptedMediaType) {\n            return [\n                null,\n                {\n                    status: 406,\n                    statusText: 'Not Acceptable',\n                    headers: {\n                        accept: 'application/graphql-response+json; charset=utf-8, application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        let params;\n        try {\n            let paramsOrRes = await optionsParseRequestParams(req);\n            if (!paramsOrRes)\n                paramsOrRes = await parseRequestParams(req);\n            if (isResponse(paramsOrRes))\n                return paramsOrRes;\n            params = paramsOrRes;\n        }\n        catch (err) {\n            return makeResponse(err, acceptedMediaType, formatError);\n        }\n        let args;\n        const maybeResErrsOrArgs = await (onSubscribe === null || onSubscribe === void 0 ? void 0 : onSubscribe(req, params));\n        if (isResponse(maybeResErrsOrArgs))\n            return maybeResErrsOrArgs;\n        else if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isExecutionResult)(maybeResErrsOrArgs) ||\n            areGraphQLErrors(maybeResErrsOrArgs))\n            return makeResponse(maybeResErrsOrArgs, acceptedMediaType, formatError);\n        else if (maybeResErrsOrArgs)\n            args = maybeResErrsOrArgs;\n        else {\n            if (!schema)\n                throw new Error('The GraphQL schema is not provided');\n            const { operationName, query, variables } = params;\n            let document;\n            try {\n                document = parse(query);\n            }\n            catch (err) {\n                return makeResponse(err, acceptedMediaType, formatError);\n            }\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            const argsWithoutSchema = {\n                operationName,\n                document,\n                variableValues: variables,\n                contextValue: resOrContext,\n            };\n            if (typeof schema === 'function') {\n                const resOrSchema = await schema(req, argsWithoutSchema);\n                if (isResponse(resOrSchema))\n                    return resOrSchema;\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema: resOrSchema });\n            }\n            else {\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema });\n            }\n            let rules = graphql__WEBPACK_IMPORTED_MODULE_0__.specifiedRules;\n            if (typeof validationRules === 'function') {\n                rules = await validationRules(req, args, graphql__WEBPACK_IMPORTED_MODULE_0__.specifiedRules);\n            }\n            else {\n                rules = [...rules, ...validationRules];\n            }\n            const validationErrs = validate(args.schema, args.document, rules);\n            if (validationErrs.length) {\n                return makeResponse(validationErrs, acceptedMediaType, formatError);\n            }\n        }\n        let operation;\n        try {\n            const ast = getOperationAST(args.document, args.operationName);\n            if (!ast)\n                throw null;\n            operation = ast.operation;\n        }\n        catch (_a) {\n            return makeResponse(new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Unable to detect operation AST'), acceptedMediaType, formatError);\n        }\n        if (operation === 'subscription') {\n            return makeResponse(new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        // mutations cannot happen over GETs\n        // https://graphql.github.io/graphql-over-http/draft/#sel-CALFJRPAAELBAAxwP\n        if (operation === 'mutation' && req.method === 'GET') {\n            return [\n                JSON.stringify({\n                    errors: [new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Cannot perform mutations over GET')],\n                }),\n                {\n                    status: 405,\n                    statusText: 'Method Not Allowed',\n                    headers: {\n                        allow: 'POST',\n                    },\n                },\n            ];\n        }\n        if (!('rootValue' in args)) {\n            args.rootValue = rootValue;\n        }\n        if (!('contextValue' in args)) {\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            args.contextValue = resOrContext;\n        }\n        let result = await execute(args);\n        const maybeResponseOrResult = await (onOperation === null || onOperation === void 0 ? void 0 : onOperation(req, args, result));\n        if (isResponse(maybeResponseOrResult))\n            return maybeResponseOrResult;\n        else if (maybeResponseOrResult)\n            result = maybeResponseOrResult;\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAsyncIterable)(result)) {\n            return makeResponse(new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        return makeResponse(result, acceptedMediaType, formatError);\n    };\n}\n/**\n * Creates an appropriate GraphQL over HTTP response following the provided arguments.\n *\n * If the first argument is an `ExecutionResult`, the operation will be treated as \"successful\".\n *\n * If the first argument is (an array of) `GraphQLError`, or an `ExecutionResult` without the `data` field, it will be treated\n * the response will be constructed with the help of `acceptedMediaType` complying with the GraphQL over HTTP spec.\n *\n * If the first argument is an `Error`, the operation will be treated as a bad request responding with `400: Bad Request` and the\n * error will be present in the `ExecutionResult` style.\n */\nfunction makeResponse(resultOrErrors, acceptedMediaType, formatError) {\n    if (resultOrErrors instanceof Error &&\n        // because GraphQLError extends the Error class\n        !isGraphQLError(resultOrErrors)) {\n        return [\n            JSON.stringify({ errors: [formatError(resultOrErrors)] }, jsonErrorReplacer),\n            {\n                status: 400,\n                statusText: 'Bad Request',\n                headers: {\n                    'content-type': 'application/json; charset=utf-8',\n                },\n            },\n        ];\n    }\n    const errors = isGraphQLError(resultOrErrors)\n        ? [resultOrErrors]\n        : areGraphQLErrors(resultOrErrors)\n            ? resultOrErrors\n            : null;\n    if (errors) {\n        return [\n            JSON.stringify({ errors: errors.map(formatError) }, jsonErrorReplacer),\n            Object.assign(Object.assign({}, (acceptedMediaType === 'application/json'\n                ? {\n                    status: 200,\n                    statusText: 'OK',\n                }\n                : {\n                    status: 400,\n                    statusText: 'Bad Request',\n                })), { headers: {\n                    'content-type': acceptedMediaType === 'application/json'\n                        ? 'application/json; charset=utf-8'\n                        : 'application/graphql-response+json; charset=utf-8',\n                } }),\n        ];\n    }\n    return [\n        JSON.stringify('errors' in resultOrErrors && resultOrErrors.errors\n            ? Object.assign(Object.assign({}, resultOrErrors), { errors: resultOrErrors.errors.map(formatError) }) : resultOrErrors, jsonErrorReplacer),\n        {\n            status: 200,\n            statusText: 'OK',\n            headers: {\n                'content-type': acceptedMediaType === 'application/json'\n                    ? 'application/json; charset=utf-8'\n                    : 'application/graphql-response+json; charset=utf-8',\n            },\n        },\n    ];\n}\nfunction getHeader(req, key) {\n    if (typeof req.headers.get === 'function') {\n        return req.headers.get(key);\n    }\n    return Object(req.headers)[key];\n}\nfunction areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        obj.length > 0 &&\n        // if one item in the array is a GraphQLError, we're good\n        obj.some(isGraphQLError));\n}\nfunction isGraphQLError(obj) {\n    return obj instanceof graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError;\n}\nfunction jsonErrorReplacer(_key, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nval) {\n    if (val instanceof Error &&\n        // GraphQL errors implement their own stringer\n        !isGraphQLError(val)) {\n        const error = val;\n        return {\n            // name: error.name, name is included in message\n            message: error.message,\n            // stack: error.stack, can leak sensitive details\n        };\n    }\n    return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/use/fetch.mjs":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/use/fetch.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHandler: () => (/* binding */ createHandler),\n/* harmony export */   parseRequestParams: () => (/* binding */ parseRequestParams)\n/* harmony export */ });\n/* harmony import */ var _handler_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../handler.mjs */ \"(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs\");\n\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n *\n * It is important to pass in the `abortedRef` so that the parser does not perform any\n * operations on a disposed request (see example).\n *\n * If the HTTP request _is not_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), the function will return a `Response`.\n *\n * If the HTTP request _is_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), but is invalid or malformed,\n * the function will throw an error and it is up to the user to handle and respond as they see fit.\n *\n * ```js\n * import http from 'http';\n * import { createServerAdapter } from '@whatwg-node/server'; // yarn add @whatwg-node/server\n * import { parseRequestParams } from 'graphql-http/lib/use/fetch';\n *\n * // Use this adapter in _any_ environment.\n * const adapter = createServerAdapter({\n *   handleRequest: async (req) => {\n *     try {\n *       const paramsOrResponse = await parseRequestParams(req);\n *       if (paramsOrResponse instanceof Response) {\n *         // not a well-formatted GraphQL over HTTP request,\n *         // parser created a response object to use\n *         return paramsOrResponse;\n *       }\n *\n *       // well-formatted GraphQL over HTTP request,\n *       // with valid parameters\n *       return new Response(JSON.stringify(paramsOrResponse, null, '  '), {\n *         status: 200,\n *       });\n *     } catch (err) {\n *       // well-formatted GraphQL over HTTP request,\n *       // but with invalid parameters\n *       return new Response(err.message, { status: 400 });\n *     }\n *   },\n * });\n *\n * const server = http.createServer(adapter);\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server/fetch\n */\nasync function parseRequestParams(req, api = {}) {\n    const rawReq = toRequest(req, api);\n    const paramsOrRes = await (0,_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.parseRequestParams)(rawReq);\n    if (!('query' in paramsOrRes)) {\n        const [body, init] = paramsOrRes;\n        return new (api.Response || Response)(body, init);\n    }\n    return paramsOrRes;\n}\n/**\n * Create a GraphQL over HTTP spec compliant request handler for\n * a fetch environment like Deno, Bun, CloudFlare Workers, Lambdas, etc.\n *\n * You can use [@whatwg-node/server](https://github.com/ardatan/whatwg-node/tree/master/packages/server) to create a server adapter and\n * isomorphically use it in _any_ environment. See an example:\n *\n * ```js\n * import http from 'http';\n * import { createServerAdapter } from '@whatwg-node/server'; // yarn add @whatwg-node/server\n * import { createHandler } from 'graphql-http/lib/use/fetch';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * // Use this adapter in _any_ environment.\n * const adapter = createServerAdapter({\n *   handleRequest: createHandler({ schema }),\n * });\n *\n * const server = http.createServer(adapter);\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @param reqCtx - Custom fetch API engine, will use from global scope if left undefined.\n *\n * @category Server/fetch\n */\nfunction createHandler(options, reqCtx = {}) {\n    const api = {\n        Response: reqCtx.Response || Response,\n        TextEncoder: reqCtx.TextEncoder || TextEncoder,\n        ReadableStream: reqCtx.ReadableStream || ReadableStream,\n    };\n    const handler = (0,_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.createHandler)(options);\n    return async function handleRequest(req) {\n        try {\n            const [body, init] = await handler(toRequest(req, api));\n            return new api.Response(body, init);\n        }\n        catch (err) {\n            // The handler shouldnt throw errors.\n            // If you wish to handle them differently, consider implementing your own request handler.\n            console.error('Internal error occurred during request handling. ' +\n                'Please check your implementation.', err);\n            return new api.Response(null, { status: 500 });\n        }\n    };\n}\nfunction toRequest(req, api = {}) {\n    return {\n        method: req.method,\n        url: req.url,\n        headers: req.headers,\n        body: () => req.text(),\n        raw: req,\n        context: {\n            Response: api.Response || Response,\n            TextEncoder: api.TextEncoder || TextEncoder,\n            ReadableStream: api.ReadableStream || ReadableStream,\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWwtaHR0cEAxLjIyLjNfZ3JhcGhxbEAxNi4xMC4wL25vZGVfbW9kdWxlcy9ncmFwaHFsLWh0dHAvbGliL3VzZS9mZXRjaC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlIO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0IsNEJBQTRCO0FBQzlELFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNENBQTRDLGFBQWE7QUFDekQ7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtDQUErQztBQUN0RDtBQUNBLDhCQUE4QixnRUFBcUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0IsNEJBQTRCO0FBQzlELFlBQVksZ0JBQWdCO0FBQzVCLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsUUFBUTtBQUM1QyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJDQUEyQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJEQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxhQUFhO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9wYXVsL3Byb2plY3RzL3BheWxvYWQvcGx1Z2luLWRldmVsb3BtZW50L2JldHRlci1maWVsZHMvZ2l0cm9vdC9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbC1odHRwQDEuMjIuM19ncmFwaHFsQDE2LjEwLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwtaHR0cC9saWIvdXNlL2ZldGNoLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVIYW5kbGVyIGFzIGNyZWF0ZVJhd0hhbmRsZXIsIHBhcnNlUmVxdWVzdFBhcmFtcyBhcyByYXdQYXJzZVJlcXVlc3RQYXJhbXMsIH0gZnJvbSAnLi4vaGFuZGxlci5tanMnO1xuLyoqXG4gKiBUaGUgR3JhcGhRTCBvdmVyIEhUVFAgc3BlYyBjb21wbGlhbnQgcmVxdWVzdCBwYXJzZXIgZm9yIGFuIGluY29taW5nIEdyYXBoUUwgcmVxdWVzdC5cbiAqXG4gKiBJdCBpcyBpbXBvcnRhbnQgdG8gcGFzcyBpbiB0aGUgYGFib3J0ZWRSZWZgIHNvIHRoYXQgdGhlIHBhcnNlciBkb2VzIG5vdCBwZXJmb3JtIGFueVxuICogb3BlcmF0aW9ucyBvbiBhIGRpc3Bvc2VkIHJlcXVlc3QgKHNlZSBleGFtcGxlKS5cbiAqXG4gKiBJZiB0aGUgSFRUUCByZXF1ZXN0IF9pcyBub3RfIGEgW3dlbGwtZm9ybWF0dGVkIEdyYXBoUUwgb3ZlciBIVFRQIHJlcXVlc3RdKGh0dHBzOi8vZ3JhcGhxbC5naXRodWIuaW8vZ3JhcGhxbC1vdmVyLWh0dHAvZHJhZnQvI3NlYy1SZXF1ZXN0KSwgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGEgYFJlc3BvbnNlYC5cbiAqXG4gKiBJZiB0aGUgSFRUUCByZXF1ZXN0IF9pc18gYSBbd2VsbC1mb3JtYXR0ZWQgR3JhcGhRTCBvdmVyIEhUVFAgcmVxdWVzdF0oaHR0cHM6Ly9ncmFwaHFsLmdpdGh1Yi5pby9ncmFwaHFsLW92ZXItaHR0cC9kcmFmdC8jc2VjLVJlcXVlc3QpLCBidXQgaXMgaW52YWxpZCBvciBtYWxmb3JtZWQsXG4gKiB0aGUgZnVuY3Rpb24gd2lsbCB0aHJvdyBhbiBlcnJvciBhbmQgaXQgaXMgdXAgdG8gdGhlIHVzZXIgdG8gaGFuZGxlIGFuZCByZXNwb25kIGFzIHRoZXkgc2VlIGZpdC5cbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG4gKiBpbXBvcnQgeyBjcmVhdGVTZXJ2ZXJBZGFwdGVyIH0gZnJvbSAnQHdoYXR3Zy1ub2RlL3NlcnZlcic7IC8vIHlhcm4gYWRkIEB3aGF0d2ctbm9kZS9zZXJ2ZXJcbiAqIGltcG9ydCB7IHBhcnNlUmVxdWVzdFBhcmFtcyB9IGZyb20gJ2dyYXBocWwtaHR0cC9saWIvdXNlL2ZldGNoJztcbiAqXG4gKiAvLyBVc2UgdGhpcyBhZGFwdGVyIGluIF9hbnlfIGVudmlyb25tZW50LlxuICogY29uc3QgYWRhcHRlciA9IGNyZWF0ZVNlcnZlckFkYXB0ZXIoe1xuICogICBoYW5kbGVSZXF1ZXN0OiBhc3luYyAocmVxKSA9PiB7XG4gKiAgICAgdHJ5IHtcbiAqICAgICAgIGNvbnN0IHBhcmFtc09yUmVzcG9uc2UgPSBhd2FpdCBwYXJzZVJlcXVlc3RQYXJhbXMocmVxKTtcbiAqICAgICAgIGlmIChwYXJhbXNPclJlc3BvbnNlIGluc3RhbmNlb2YgUmVzcG9uc2UpIHtcbiAqICAgICAgICAgLy8gbm90IGEgd2VsbC1mb3JtYXR0ZWQgR3JhcGhRTCBvdmVyIEhUVFAgcmVxdWVzdCxcbiAqICAgICAgICAgLy8gcGFyc2VyIGNyZWF0ZWQgYSByZXNwb25zZSBvYmplY3QgdG8gdXNlXG4gKiAgICAgICAgIHJldHVybiBwYXJhbXNPclJlc3BvbnNlO1xuICogICAgICAgfVxuICpcbiAqICAgICAgIC8vIHdlbGwtZm9ybWF0dGVkIEdyYXBoUUwgb3ZlciBIVFRQIHJlcXVlc3QsXG4gKiAgICAgICAvLyB3aXRoIHZhbGlkIHBhcmFtZXRlcnNcbiAqICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zT3JSZXNwb25zZSwgbnVsbCwgJyAgJyksIHtcbiAqICAgICAgICAgc3RhdHVzOiAyMDAsXG4gKiAgICAgICB9KTtcbiAqICAgICB9IGNhdGNoIChlcnIpIHtcbiAqICAgICAgIC8vIHdlbGwtZm9ybWF0dGVkIEdyYXBoUUwgb3ZlciBIVFRQIHJlcXVlc3QsXG4gKiAgICAgICAvLyBidXQgd2l0aCBpbnZhbGlkIHBhcmFtZXRlcnNcbiAqICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoZXJyLm1lc3NhZ2UsIHsgc3RhdHVzOiA0MDAgfSk7XG4gKiAgICAgfVxuICogICB9LFxuICogfSk7XG4gKlxuICogY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYWRhcHRlcik7XG4gKlxuICogc2VydmVyLmxpc3Rlbig0MDAwKTtcbiAqIGNvbnNvbGUubG9nKCdMaXN0ZW5pbmcgdG8gcG9ydCA0MDAwJyk7XG4gKiBgYGBcbiAqXG4gKiBAY2F0ZWdvcnkgU2VydmVyL2ZldGNoXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZVJlcXVlc3RQYXJhbXMocmVxLCBhcGkgPSB7fSkge1xuICAgIGNvbnN0IHJhd1JlcSA9IHRvUmVxdWVzdChyZXEsIGFwaSk7XG4gICAgY29uc3QgcGFyYW1zT3JSZXMgPSBhd2FpdCByYXdQYXJzZVJlcXVlc3RQYXJhbXMocmF3UmVxKTtcbiAgICBpZiAoISgncXVlcnknIGluIHBhcmFtc09yUmVzKSkge1xuICAgICAgICBjb25zdCBbYm9keSwgaW5pdF0gPSBwYXJhbXNPclJlcztcbiAgICAgICAgcmV0dXJuIG5ldyAoYXBpLlJlc3BvbnNlIHx8IFJlc3BvbnNlKShib2R5LCBpbml0KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtc09yUmVzO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBHcmFwaFFMIG92ZXIgSFRUUCBzcGVjIGNvbXBsaWFudCByZXF1ZXN0IGhhbmRsZXIgZm9yXG4gKiBhIGZldGNoIGVudmlyb25tZW50IGxpa2UgRGVubywgQnVuLCBDbG91ZEZsYXJlIFdvcmtlcnMsIExhbWJkYXMsIGV0Yy5cbiAqXG4gKiBZb3UgY2FuIHVzZSBbQHdoYXR3Zy1ub2RlL3NlcnZlcl0oaHR0cHM6Ly9naXRodWIuY29tL2FyZGF0YW4vd2hhdHdnLW5vZGUvdHJlZS9tYXN0ZXIvcGFja2FnZXMvc2VydmVyKSB0byBjcmVhdGUgYSBzZXJ2ZXIgYWRhcHRlciBhbmRcbiAqIGlzb21vcnBoaWNhbGx5IHVzZSBpdCBpbiBfYW55XyBlbnZpcm9ubWVudC4gU2VlIGFuIGV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuICogaW1wb3J0IHsgY3JlYXRlU2VydmVyQWRhcHRlciB9IGZyb20gJ0B3aGF0d2ctbm9kZS9zZXJ2ZXInOyAvLyB5YXJuIGFkZCBAd2hhdHdnLW5vZGUvc2VydmVyXG4gKiBpbXBvcnQgeyBjcmVhdGVIYW5kbGVyIH0gZnJvbSAnZ3JhcGhxbC1odHRwL2xpYi91c2UvZmV0Y2gnO1xuICogaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnLi9teS1ncmFwaHFsLXNjaGVtYS9pbmRleC5tanMnO1xuICpcbiAqIC8vIFVzZSB0aGlzIGFkYXB0ZXIgaW4gX2FueV8gZW52aXJvbm1lbnQuXG4gKiBjb25zdCBhZGFwdGVyID0gY3JlYXRlU2VydmVyQWRhcHRlcih7XG4gKiAgIGhhbmRsZVJlcXVlc3Q6IGNyZWF0ZUhhbmRsZXIoeyBzY2hlbWEgfSksXG4gKiB9KTtcbiAqXG4gKiBjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhZGFwdGVyKTtcbiAqXG4gKiBzZXJ2ZXIubGlzdGVuKDQwMDApO1xuICogY29uc29sZS5sb2coJ0xpc3RlbmluZyB0byBwb3J0IDQwMDAnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSByZXFDdHggLSBDdXN0b20gZmV0Y2ggQVBJIGVuZ2luZSwgd2lsbCB1c2UgZnJvbSBnbG9iYWwgc2NvcGUgaWYgbGVmdCB1bmRlZmluZWQuXG4gKlxuICogQGNhdGVnb3J5IFNlcnZlci9mZXRjaFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSGFuZGxlcihvcHRpb25zLCByZXFDdHggPSB7fSkge1xuICAgIGNvbnN0IGFwaSA9IHtcbiAgICAgICAgUmVzcG9uc2U6IHJlcUN0eC5SZXNwb25zZSB8fCBSZXNwb25zZSxcbiAgICAgICAgVGV4dEVuY29kZXI6IHJlcUN0eC5UZXh0RW5jb2RlciB8fCBUZXh0RW5jb2RlcixcbiAgICAgICAgUmVhZGFibGVTdHJlYW06IHJlcUN0eC5SZWFkYWJsZVN0cmVhbSB8fCBSZWFkYWJsZVN0cmVhbSxcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZXIgPSBjcmVhdGVSYXdIYW5kbGVyKG9wdGlvbnMpO1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KHJlcSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgW2JvZHksIGluaXRdID0gYXdhaXQgaGFuZGxlcih0b1JlcXVlc3QocmVxLCBhcGkpKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgYXBpLlJlc3BvbnNlKGJvZHksIGluaXQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIFRoZSBoYW5kbGVyIHNob3VsZG50IHRocm93IGVycm9ycy5cbiAgICAgICAgICAgIC8vIElmIHlvdSB3aXNoIHRvIGhhbmRsZSB0aGVtIGRpZmZlcmVudGx5LCBjb25zaWRlciBpbXBsZW1lbnRpbmcgeW91ciBvd24gcmVxdWVzdCBoYW5kbGVyLlxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSW50ZXJuYWwgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHJlcXVlc3QgaGFuZGxpbmcuICcgK1xuICAgICAgICAgICAgICAgICdQbGVhc2UgY2hlY2sgeW91ciBpbXBsZW1lbnRhdGlvbi4nLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBhcGkuUmVzcG9uc2UobnVsbCwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiB0b1JlcXVlc3QocmVxLCBhcGkgPSB7fSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICAgICAgdXJsOiByZXEudXJsLFxuICAgICAgICBoZWFkZXJzOiByZXEuaGVhZGVycyxcbiAgICAgICAgYm9keTogKCkgPT4gcmVxLnRleHQoKSxcbiAgICAgICAgcmF3OiByZXEsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIFJlc3BvbnNlOiBhcGkuUmVzcG9uc2UgfHwgUmVzcG9uc2UsXG4gICAgICAgICAgICBUZXh0RW5jb2RlcjogYXBpLlRleHRFbmNvZGVyIHx8IFRleHRFbmNvZGVyLFxuICAgICAgICAgICAgUmVhZGFibGVTdHJlYW06IGFwaS5SZWFkYWJsZVN0cmVhbSB8fCBSZWFkYWJsZVN0cmVhbSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/use/fetch.mjs\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendedTypeof: () => (/* binding */ extendedTypeof),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isExecutionResult: () => (/* binding */ isExecutionResult),\n/* harmony export */   isObject: () => (/* binding */ isObject)\n/* harmony export */ });\n/**\n *\n * utils\n *\n */\n/** @private */\nfunction extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nfunction isObject(val) {\n    return typeof val === 'object' && val !== null;\n}\n/** @private */\nfunction isExecutionResult(val) {\n    return (isObject(val) &&\n        ('data' in val || ('data' in val && val.data == null && 'errors' in val)));\n}\n/** @private */\nfunction isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWwtaHR0cEAxLjIyLjNfZ3JhcGhxbEAxNi4xMC4wL25vZGVfbW9kdWxlcy9ncmFwaHFsLWh0dHAvbGliL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3BhdWwvcHJvamVjdHMvcGF5bG9hZC9wbHVnaW4tZGV2ZWxvcG1lbnQvYmV0dGVyLWZpZWxkcy9naXRyb290L25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsLWh0dHBAMS4yMi4zX2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvZ3JhcGhxbC1odHRwL2xpYi91dGlscy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogdXRpbHNcbiAqXG4gKi9cbi8qKiBAcHJpdmF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZGVkVHlwZW9mKHZhbCkge1xuICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWw7XG59XG4vKiogQHByaXZhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsO1xufVxuLyoqIEBwcml2YXRlICovXG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRpb25SZXN1bHQodmFsKSB7XG4gICAgcmV0dXJuIChpc09iamVjdCh2YWwpICYmXG4gICAgICAgICgnZGF0YScgaW4gdmFsIHx8ICgnZGF0YScgaW4gdmFsICYmIHZhbC5kYXRhID09IG51bGwgJiYgJ2Vycm9ycycgaW4gdmFsKSkpO1xufVxuLyoqIEBwcml2YXRlICovXG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKHZhbCkge1xuICAgIHJldHVybiB0eXBlb2YgT2JqZWN0KHZhbClbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs\n");

/***/ })

};
;